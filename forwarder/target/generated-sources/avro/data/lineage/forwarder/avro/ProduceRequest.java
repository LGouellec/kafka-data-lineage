/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package data.lineage.forwarder.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ProduceRequest extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -61170081438377247L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ProduceRequest\",\"namespace\":\"data.lineage.forwarder.avro\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"methodName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"topic\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"user\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"operation\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"client_id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ProduceRequest> ENCODER =
      new BinaryMessageEncoder<ProduceRequest>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ProduceRequest> DECODER =
      new BinaryMessageDecoder<ProduceRequest>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ProduceRequest> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ProduceRequest> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ProduceRequest> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ProduceRequest>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ProduceRequest to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ProduceRequest from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ProduceRequest instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ProduceRequest fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String id;
  private java.lang.String methodName;
  private java.lang.String topic;
  private java.lang.String user;
  private java.lang.String operation;
  private java.lang.String client_id;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ProduceRequest() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param methodName The new value for methodName
   * @param topic The new value for topic
   * @param user The new value for user
   * @param operation The new value for operation
   * @param client_id The new value for client_id
   */
  public ProduceRequest(java.lang.String id, java.lang.String methodName, java.lang.String topic, java.lang.String user, java.lang.String operation, java.lang.String client_id) {
    this.id = id;
    this.methodName = methodName;
    this.topic = topic;
    this.user = user;
    this.operation = operation;
    this.client_id = client_id;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return methodName;
    case 2: return topic;
    case 3: return user;
    case 4: return operation;
    case 5: return client_id;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = value$ != null ? value$.toString() : null; break;
    case 1: methodName = value$ != null ? value$.toString() : null; break;
    case 2: topic = value$ != null ? value$.toString() : null; break;
    case 3: user = value$ != null ? value$.toString() : null; break;
    case 4: operation = value$ != null ? value$.toString() : null; break;
    case 5: client_id = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.String getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'methodName' field.
   * @return The value of the 'methodName' field.
   */
  public java.lang.String getMethodName() {
    return methodName;
  }


  /**
   * Sets the value of the 'methodName' field.
   * @param value the value to set.
   */
  public void setMethodName(java.lang.String value) {
    this.methodName = value;
  }

  /**
   * Gets the value of the 'topic' field.
   * @return The value of the 'topic' field.
   */
  public java.lang.String getTopic() {
    return topic;
  }


  /**
   * Sets the value of the 'topic' field.
   * @param value the value to set.
   */
  public void setTopic(java.lang.String value) {
    this.topic = value;
  }

  /**
   * Gets the value of the 'user' field.
   * @return The value of the 'user' field.
   */
  public java.lang.String getUser() {
    return user;
  }


  /**
   * Sets the value of the 'user' field.
   * @param value the value to set.
   */
  public void setUser(java.lang.String value) {
    this.user = value;
  }

  /**
   * Gets the value of the 'operation' field.
   * @return The value of the 'operation' field.
   */
  public java.lang.String getOperation() {
    return operation;
  }


  /**
   * Sets the value of the 'operation' field.
   * @param value the value to set.
   */
  public void setOperation(java.lang.String value) {
    this.operation = value;
  }

  /**
   * Gets the value of the 'client_id' field.
   * @return The value of the 'client_id' field.
   */
  public java.lang.String getClientId() {
    return client_id;
  }


  /**
   * Sets the value of the 'client_id' field.
   * @param value the value to set.
   */
  public void setClientId(java.lang.String value) {
    this.client_id = value;
  }

  /**
   * Creates a new ProduceRequest RecordBuilder.
   * @return A new ProduceRequest RecordBuilder
   */
  public static data.lineage.forwarder.avro.ProduceRequest.Builder newBuilder() {
    return new data.lineage.forwarder.avro.ProduceRequest.Builder();
  }

  /**
   * Creates a new ProduceRequest RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ProduceRequest RecordBuilder
   */
  public static data.lineage.forwarder.avro.ProduceRequest.Builder newBuilder(data.lineage.forwarder.avro.ProduceRequest.Builder other) {
    if (other == null) {
      return new data.lineage.forwarder.avro.ProduceRequest.Builder();
    } else {
      return new data.lineage.forwarder.avro.ProduceRequest.Builder(other);
    }
  }

  /**
   * Creates a new ProduceRequest RecordBuilder by copying an existing ProduceRequest instance.
   * @param other The existing instance to copy.
   * @return A new ProduceRequest RecordBuilder
   */
  public static data.lineage.forwarder.avro.ProduceRequest.Builder newBuilder(data.lineage.forwarder.avro.ProduceRequest other) {
    if (other == null) {
      return new data.lineage.forwarder.avro.ProduceRequest.Builder();
    } else {
      return new data.lineage.forwarder.avro.ProduceRequest.Builder(other);
    }
  }

  /**
   * RecordBuilder for ProduceRequest instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ProduceRequest>
    implements org.apache.avro.data.RecordBuilder<ProduceRequest> {

    private java.lang.String id;
    private java.lang.String methodName;
    private java.lang.String topic;
    private java.lang.String user;
    private java.lang.String operation;
    private java.lang.String client_id;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(data.lineage.forwarder.avro.ProduceRequest.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.methodName)) {
        this.methodName = data().deepCopy(fields()[1].schema(), other.methodName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.topic)) {
        this.topic = data().deepCopy(fields()[2].schema(), other.topic);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.user)) {
        this.user = data().deepCopy(fields()[3].schema(), other.user);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.operation)) {
        this.operation = data().deepCopy(fields()[4].schema(), other.operation);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.client_id)) {
        this.client_id = data().deepCopy(fields()[5].schema(), other.client_id);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing ProduceRequest instance
     * @param other The existing instance to copy.
     */
    private Builder(data.lineage.forwarder.avro.ProduceRequest other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.methodName)) {
        this.methodName = data().deepCopy(fields()[1].schema(), other.methodName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.topic)) {
        this.topic = data().deepCopy(fields()[2].schema(), other.topic);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.user)) {
        this.user = data().deepCopy(fields()[3].schema(), other.user);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.operation)) {
        this.operation = data().deepCopy(fields()[4].schema(), other.operation);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.client_id)) {
        this.client_id = data().deepCopy(fields()[5].schema(), other.client_id);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.String getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public data.lineage.forwarder.avro.ProduceRequest.Builder setId(java.lang.String value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public data.lineage.forwarder.avro.ProduceRequest.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'methodName' field.
      * @return The value.
      */
    public java.lang.String getMethodName() {
      return methodName;
    }


    /**
      * Sets the value of the 'methodName' field.
      * @param value The value of 'methodName'.
      * @return This builder.
      */
    public data.lineage.forwarder.avro.ProduceRequest.Builder setMethodName(java.lang.String value) {
      validate(fields()[1], value);
      this.methodName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'methodName' field has been set.
      * @return True if the 'methodName' field has been set, false otherwise.
      */
    public boolean hasMethodName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'methodName' field.
      * @return This builder.
      */
    public data.lineage.forwarder.avro.ProduceRequest.Builder clearMethodName() {
      methodName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'topic' field.
      * @return The value.
      */
    public java.lang.String getTopic() {
      return topic;
    }


    /**
      * Sets the value of the 'topic' field.
      * @param value The value of 'topic'.
      * @return This builder.
      */
    public data.lineage.forwarder.avro.ProduceRequest.Builder setTopic(java.lang.String value) {
      validate(fields()[2], value);
      this.topic = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'topic' field has been set.
      * @return True if the 'topic' field has been set, false otherwise.
      */
    public boolean hasTopic() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'topic' field.
      * @return This builder.
      */
    public data.lineage.forwarder.avro.ProduceRequest.Builder clearTopic() {
      topic = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'user' field.
      * @return The value.
      */
    public java.lang.String getUser() {
      return user;
    }


    /**
      * Sets the value of the 'user' field.
      * @param value The value of 'user'.
      * @return This builder.
      */
    public data.lineage.forwarder.avro.ProduceRequest.Builder setUser(java.lang.String value) {
      validate(fields()[3], value);
      this.user = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'user' field has been set.
      * @return True if the 'user' field has been set, false otherwise.
      */
    public boolean hasUser() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'user' field.
      * @return This builder.
      */
    public data.lineage.forwarder.avro.ProduceRequest.Builder clearUser() {
      user = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'operation' field.
      * @return The value.
      */
    public java.lang.String getOperation() {
      return operation;
    }


    /**
      * Sets the value of the 'operation' field.
      * @param value The value of 'operation'.
      * @return This builder.
      */
    public data.lineage.forwarder.avro.ProduceRequest.Builder setOperation(java.lang.String value) {
      validate(fields()[4], value);
      this.operation = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'operation' field has been set.
      * @return True if the 'operation' field has been set, false otherwise.
      */
    public boolean hasOperation() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'operation' field.
      * @return This builder.
      */
    public data.lineage.forwarder.avro.ProduceRequest.Builder clearOperation() {
      operation = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'client_id' field.
      * @return The value.
      */
    public java.lang.String getClientId() {
      return client_id;
    }


    /**
      * Sets the value of the 'client_id' field.
      * @param value The value of 'client_id'.
      * @return This builder.
      */
    public data.lineage.forwarder.avro.ProduceRequest.Builder setClientId(java.lang.String value) {
      validate(fields()[5], value);
      this.client_id = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'client_id' field has been set.
      * @return True if the 'client_id' field has been set, false otherwise.
      */
    public boolean hasClientId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'client_id' field.
      * @return This builder.
      */
    public data.lineage.forwarder.avro.ProduceRequest.Builder clearClientId() {
      client_id = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ProduceRequest build() {
      try {
        ProduceRequest record = new ProduceRequest();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.String) defaultValue(fields()[0]);
        record.methodName = fieldSetFlags()[1] ? this.methodName : (java.lang.String) defaultValue(fields()[1]);
        record.topic = fieldSetFlags()[2] ? this.topic : (java.lang.String) defaultValue(fields()[2]);
        record.user = fieldSetFlags()[3] ? this.user : (java.lang.String) defaultValue(fields()[3]);
        record.operation = fieldSetFlags()[4] ? this.operation : (java.lang.String) defaultValue(fields()[4]);
        record.client_id = fieldSetFlags()[5] ? this.client_id : (java.lang.String) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ProduceRequest>
    WRITER$ = (org.apache.avro.io.DatumWriter<ProduceRequest>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ProduceRequest>
    READER$ = (org.apache.avro.io.DatumReader<ProduceRequest>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.id);

    out.writeString(this.methodName);

    out.writeString(this.topic);

    out.writeString(this.user);

    out.writeString(this.operation);

    out.writeString(this.client_id);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readString();

      this.methodName = in.readString();

      this.topic = in.readString();

      this.user = in.readString();

      this.operation = in.readString();

      this.client_id = in.readString();

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readString();
          break;

        case 1:
          this.methodName = in.readString();
          break;

        case 2:
          this.topic = in.readString();
          break;

        case 3:
          this.user = in.readString();
          break;

        case 4:
          this.operation = in.readString();
          break;

        case 5:
          this.client_id = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










